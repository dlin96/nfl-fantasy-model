$(document).ready(function() {
	$("#submit").click(function() {
		var player=$("#player").val();
		var player2=$("#player2").val();
		$.post("http://localhost:3000/comparison/" + player + "/" + player2, {player: player, player2: player2}).done(function(data) {
            if(jQuery.isEmptyObject(data)) {
                $("#message").empty();
                $("#message").prepend("Invalid entry. Please try again using the autocomplete options");
                $("#result").css("visibility", "visible");
                $("#playerTable").css("visibility", "hidden");
            } else {
                var playerData = $.parseJSON(data);
                $("#playerTable tr").remove();
                $("#playerTable th").remove();
                $("#result").css('visibility', 'visible');
                $("#message").empty();
                $("#message").prepend("Result:");
                $("#playerTable").prepend("<th>" + player2 + "</th>");
                $("#playerTable").prepend("<th>stat</th>");
                $("#playerTable").prepend("<th>" + player + "</th>");
                var neg_stats = ["pfouls", "tos", "topg"];
                for(var key in playerData[0]) {
                    if(key === "playerId")
                        continue;
                    var txt = "<tr><td id='player1" + key+"''>" + playerData[0][key] + "</td><td>" + key + "</td><td id='player2"+key+ "''>" + playerData[1][key]+"</td></tr>";
                    $("#playerTable").append(txt);
                    if(jQuery.inArray(key, neg_stats) >= 0) {
                        if(playerData[0][key] < playerData[1][key]) {
                            $("#player1"+key).css("background-color", "green");
                            $("#player2"+key).css("background-color", "red");
                        } else if(playerData[0][key] > playerData[1][key]) {
                            $("#player2"+key).css("background-color", "green");
                            $("#player1"+key).css("background-color", "red");
                        }
                    }
                    else {
                        if(playerData[0][key] > playerData[1][key]) {
                            $("#player1"+key).css("background-color", "green");
                            $("#player2"+key).css("background-color", "red");
                        } else if(playerData[0][key] < playerData[1][key]) {
                            $("#player2"+key).css("background-color", "green");
                            $("#player1"+key).css("background-color", "red");
                        }
                    }
                }
                $("#playerTable").css("visibility", "visible");
            }
		}, "json");
	});
});




var http = require('http');
var mysql = require('mysql');
var prompt = require('prompt');
var express = require('express');
var bodyParser = require('body-parser');

var app = express();

app.set('views',__dirname + '/public');
app.use(express.static(__dirname + '/js'));
app.use(express.static('public'))
app.set('view engine', 'ejs');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true}));
app.engine('html', require('ejs').renderFile);

// function to connect to mysqldb. Created for sake of reusability. 
function dbConnection() {
    // create mysql connection 
    var con = mysql.createConnection({
        host: "sports-db.ceutzulos0qe.us-west-1.rds.amazonaws.com",
        user: "root",
        password: "warriors73-9",
        database: "nbadb"
    });

    // connect to the db
    con.connect();
    return con;
}

app.get('/', function(req, res) {

    res.sendFile(__dirname + '/public/index.html');
});

// temporary route
app.get('/styles.css', function(req, res) {
    res.sendFile(__dirname + '/public/styles.css');
});

app.get('/search', function(req, res) {
    var con = dbConnection();
    // query using the user input
    var query = 'SELECT fullName, playerId, team FROM players WHERE fullName LIKE "%' + req.query.key+'%"';
    con.query(query, function(err, rows, fields) {
        var data=[];
        for(var i=0; i<rows.length;i++) {
            data.push(rows[i].fullName + " " + rows[i].team);
        }

        json = JSON.stringify(data);
        res.send(json);
    });
});

function splitParam(url_param) {
    var fullName = url_param;
    var playerNameArr = fullName.split(' ');
    fullName = playerNameArr[0] + ' ' + playerNameArr[1];
    var team = playerNameArr[2]; 

    return [fullName, team];
}

/*
 * Post method that takes the input from the page and returns a json of the 
 * selected players stats. This method is strictly for comparing 2 players.
 *
 * TODO: see if we can avoid doing a query for playerId.
 */

app.post('/comparison/:playerName/:player2', function(req, res) {
    var con = dbConnection();
    var playerOne = splitParam(req.params.playerName);
    var fullName = playerOne[0];
    var team = playerOne[1];

    var playerTwo = splitParam(req.params.player2);
    var fullName2 = playerTwo[0];
    var team2 = playerTwo[1];

    //retrieves playerId from the fullName and team. 
    var q =  'SELECT playerId FROM players WHERE fullName="' + fullName2 + '" AND team="' + team2 +'"';
    var query = 'SELECT playerId FROM players WHERE fullName="'+fullName+'" AND team="'+team+'" UNION ' + q;
    con.query(query, function(err, rows, fields) {
        if(rows[0] && rows[1]) {
            var playerId = rows[0].playerId;
            var playerId2 = rows[1].playerId;

            // retrieves the stats from the given unique playerId.
            var secQ = 'SELECT * FROM stats WHERE playerId="'+playerId2+'"'
            var secQuery = 'SELECT * FROM stats WHERE playerId="'+playerId+'" UNION ' + secQ;
            con.query(secQuery, function(err, rows) {
                var json = JSON.stringify([rows[0], rows[1]]);
                // console.log(json);
                res.send(json);
            });
        } else {
            var json = {};
            res.send(json);
        }
    });
});

app.get('/json/:playername', function (req, res) {
    var playername = req.params.playername;

    var con = dbConnection();
    
    //retrieve playerId
    var playerIDquery = 'SELECT playerId FROM players WHERE fullname LIKE "%' + playername +'%"';
    con.query(playerIDquery, function(err, rows, fields) {

        //data should only contain one player id
        var playerID = rows[0].playerId;

        var statsQuery = 'SELECT * FROM stats WHERE playerId LIKE "%' + playerID + '%"';

        con.query(statsQuery, function(_err, _rows, _fields) {

            var data = _rows[0];
            var json = JSON.stringify(data);

            console.log(json);
            res.end(json);

            con.end(); 
        });
    });
});


// start our server, listening on port 3000
var server=app.listen(3000,function(){
    console.log("We have started our server on port 3000");
});



.queryBlock{
    font-family: sans-serif;
    position: relative;
    margin: 50px;
}
.typeahead, .tt-query, .tt-hint {
    border: 2px solid #CCCCCC;
    border-radius: 8px;
    font-size: 24px;
    height: 30px;
    line-height: 30px;
    outline: medium none;
    padding: 8px 12px;
    width: 396px;
}
.typeahead {
    background-color: #FFFFFF;
}
.typeahead:focus {
    border: 2px solid #0097CF;
}
.tt-query {
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset;
}
.tt-hint {
    color: #999999;
}
.tt-dropdown-menu {
    background-color: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    margin-top: 12px;
    padding: 8px 0;
    width: 422px;
}
.tt-suggestion {
    font-size: 24px;
    line-height: 24px;
    padding: 3px 20px;
}
.tt-suggestion.tt-is-under-cursor {
    background-color: #0097CF;
    color: #FFFFFF;
}
.tt-suggestion p {
    margin: 0;
}

table, th, td {
    border: 1px solid black;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
}

#result {
    visibility: hidden;
    text-align: center;
}

#queryBlock {
    display: inline-block;
}

#submit {
    background-color: white; 
    color: black; 
    border: 2px solid #008CBA;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    cursor: pointer;
    border-radius: 10px;
    margin-top: 20px;
}